@using BlazorSozluk.WebApp.Infrastructure.Services.Interfaces;
@using BlazorSozluk.WebApplication.Pages.MainPages;
@using Microsoft.AspNetCore.Components.Authorization
@inherits LayoutComponentBase

<div class="page">
    <div class="sidebar">
        <h5 class="text-white text-center siderbar-heading">@EntriesSubject</h5>
        <a class="more-data" @onclick="@RefreshEntries">refresh</a>

        <ul class="list-group">
            <EntriesComponent @ref="@_entriesComponent" />
        </ul>
        
    </div>

    <main>
        <div class="top-row px-4">
            <a href="https://docs.microsoft.com/aspnet/" target="_blank">About</a>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>

    <AuthorizeView>
        <Authorized>
            <div class="top-nav">
                <input type="button" class="form-control btn-success btn-sozluk w-auto" value="Create Entry" @onclick="@NavigateCreateEntryPage" />
                <input type="button" class="form-control btn-success btn-sozluk w-auto" value="ME" @onclick="@NavigateMEPage" />
                <input type="button" class="form-control btn-success btn-sozluk w-auto" value="Logout" @onclick="@NavigateLogoutPage" />
            </div>
        </Authorized>

        <NotAuthorized>
            <div class="top-nav">
                <input type="button" class="form-control btn-success w-auto" value="Login" @onclick="NavigateLoginPage" />
            </div>
        </NotAuthorized>
    </AuthorizeView>

    <div class="sub-nav">
        <a class="sub-nav-item active">Bugün</a>
        <a class="sub-nav-item">gündem</a>
        <a class="sub-nav-item">debe</a>
        <a class="sub-nav-item">sorunsallar</a>
        <a class="sub-nav-item">takip</a>
        <a class="sub-nav-item">son</a>
        <a class="sub-nav-item">kenar</a>
        <a class="sub-nav-item">çaylaklar</a>
    </div>
</div>



@code{
    private EntriesComponent _entriesComponent;
    private string searchText;
    private bool showSearchResult;
    private List<SearchEntryViewModel> searchResults = new List<SearchEntryViewModel>();
    public string EntriesSubject { get; set; } = "bugün";

    [Inject]
    NavigationManager navigationManager { get; set; }

    [Inject]
    IEntryService entryService { get; set; }

    private async Task RefreshEntries()
    {
        await _entriesComponent.RefreshList();
    }

    private void NavigateMEPage()
    {
        navigationManager.NavigateTo("/me");
    }

    private void NavigateLoginPage()
    {
        navigationManager.NavigateTo("/login");
    }

    private void NavigateLogoutPage()
    {
        navigationManager.NavigateTo("/logout");
    }
    private void NavigateCreateEntryPage()
    {
        navigationManager.NavigateTo("/createEntry");
    }

    private async Task SearchKeyDown(KeyboardEventArgs e)
    {
        if(e.Code=="Enter" || e.Code == "NumpadEnter")
        {
            await Search();
        }
    }

    private async Task OnSearchFocusOut()
    {
        await Task.Delay(100);
        if (showSearchResult)
            showSearchResult = false;
    }

    private async Task Search()
    {
        if (string.IsNullOrEmpty(searchText))
            return;

        searchResults = await entryService.SearchBySubject(searchText);
        showSearchResult = true;
        searchText = string.Empty;
    }

    private async Task GoEntry(Guid entryId)
    {
        await OnSearchFocusOut();
        navigationManager.NavigateTo($"/entry/{entryId}");
    }
}
